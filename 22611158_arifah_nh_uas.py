# -*- coding: utf-8 -*-
"""22611158_Arifah NH_UAS

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1yDlTtV9pGbiLWzQjGkEIawJzBXF90Ncm
"""

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.preprocessing import LabelEncoder

#ignore warnings
import warnings
warnings.filterwarnings('ignore')

data = pd.read_csv('/content/restaurant_menu_optimization_data.csv')
print(data.head())

print(data.tail())

data.shape

# Melihat statistik deskriptif
descriptive_stats = data.describe()
print(descriptive_stats)

# Visualisasi distribusi harga
sns.set(style="whitegrid")
plt.figure(figsize=(10, 6))
sns.histplot(data['Price'], bins=30, kde=True)
plt.title('Distribusi Harga Menu')
plt.xlabel('Harga')
plt.ylabel('Frekuensi')
plt.show()

# Visualisasi distribusi kategori menu
plt.figure(figsize=(12, 6))
sns.countplot(y='MenuCategory', data=data, order=data['MenuCategory'].value_counts().index)
plt.title('Distribusi Kategori Menu')
plt.xlabel('Jumlah')
plt.ylabel('Kategori Menu')
plt.show()

# Visualisasi distribusi profitabilitas
plt.figure(figsize=(10, 6))
sns.countplot(x='Profitability', data=data, order=data['Profitability'].value_counts().index)
plt.title('Distribusi Profitabilitas')
plt.xlabel('Profitabilitas')
plt.ylabel('Jumlah')
plt.show()

data.info()

df=data.drop(columns=['RestaurantID'])
df

df.duplicated().sum()

df=df.drop_duplicates()

df.isna().sum()

plt.figure(figsize=(12, 6))

sns.barplot(x='MenuCategory', y='Price',data=df ,palette='mako')
plt.title('MenuCategory VS Price')
plt.show()

plt.figure(figsize=(15, 6))

sns.countplot(x='MenuCategory', order=df['MenuCategory'].value_counts().index, data=df, hue='Profitability', palette='Set1')
plt.title('Distribution of MenuCategory with Profitability')
plt.show()

plt.figure(figsize=(15, 6))

sns.countplot(x='MenuCategory', order=df['MenuCategory'].value_counts().index, data=df)
plt.title('Distribution of MenuCategory')
plt.show()

plt.figure(figsize=(30, 10))

sns.barplot(x='MenuItem', y='Price',data=df )
plt.title('MenuItem VS Price')
plt.show()

plt.figure(figsize=(30, 6))

sns.countplot(x='MenuItem', order=df['MenuItem'].value_counts().index, data=df, hue='Profitability', palette='Set1')
plt.title('Distribution of MenuItem with Profitability')
plt.show()

plt.figure(figsize=(30, 6))

sns.countplot(x='Ingredients', order=df['Ingredients'].value_counts().index, data=df, hue='Profitability', palette='Set1')
plt.title('Distribution of Ingredients with Profitability')
plt.show()

#encoding
le = LabelEncoder()

df['MenuCategory'] = le.fit_transform(df['MenuCategory'])
df['MenuItem'] = le.fit_transform(df['MenuItem'])
df['Ingredients'] = le.fit_transform(df['Ingredients'])
df['Profitability'] = le.fit_transform(df['Profitability'])

#split
#target column
target_column = 'Profitability'

X = df.drop(columns=[target_column]) # -> features all features without target
y = df[target_column]

from sklearn.model_selection import train_test_split

# Split data into training and test sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42, shuffle=True)

from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report

# Initialize and train Random Forest model
random_forest = RandomForestClassifier()
random_forest.fit(X_train, y_train)

# Predict on test data
y_pred_random_forest = random_forest.predict(X_test)

# Evaluate Random Forest
print("Random Forest:")
print("Accuracy Score:", accuracy_score(y_test, y_pred_random_forest))
print("Confusion Matrix:\n", confusion_matrix(y_test, y_pred_random_forest))
print("Classification Report:\n", classification_report(y_test, y_pred_random_forest))

# Generate confusion matrix
confusion_matrix = confusion_matrix(y_test, y_pred_random_forest, labels=random_forest.classes_)

# Plotting the confusion matrix
plt.figure(figsize=(10, 7))
sns.heatmap(confusion_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=random_forest.classes_, yticklabels=random_forest.classes_)
plt.title('Confusion Matrix')
plt.xlabel('Predicted Label')
plt.ylabel('True Label')
plt.show()

actual_labels = y_test
predicted_labels = y_pred_random_forest

# Calculate counts of each label
actual_counts = pd.Series(actual_labels).value_counts().sort_index()
predicted_counts = pd.Series(predicted_labels).value_counts().sort_index()

# Create a DataFrame to align actual and predicted counts for plotting
comparison_df = pd.DataFrame({
    'Actual': actual_counts,
    'Predicted': predicted_counts
})

# Plotting
ax = comparison_df.plot(kind='bar', width=0.8, figsize=(10, 6))

# Customizing x-axis labels to match the actual label names
ax.set_xticklabels(['Low', 'Medium', 'High'])
plt.xlabel('Labels')
plt.ylabel('Count')
plt.title('Comparison of Actual and Predicted Labels')
plt.legend()
plt.show()

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler, LabelEncoder

# Memuat dataset
restoran = pd.read_csv('restaurant_menu_optimization_data.csv')
X = restoran.drop(columns=['Profitability'])
Y = restoran[['Profitability']]

# Identifikasi kolom yang berisi data string
string_columns = X.select_dtypes(include=['object']).columns

# Lakukan Label Encoding untuk kolom string
label_encoders = {}
for col in string_columns:
    le = LabelEncoder()
    X[col] = le.fit_transform(X[col])
    label_encoders[col] = le

# Memisahkan data menjadi data latih dan data uji
X_train, X_test, y_train, y_test = train_test_split(X, Y, test_size=0.3, random_state=42)

# Menormalkan fitur
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

print(X_train_scaled)
print(X_test_scaled)

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler, LabelEncoder
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix

# Memuat dataset
file_path = 'restaurant_menu_optimization_data.csv'
restoran = pd.read_csv(file_path)

# Memisahkan fitur dan target
X = restoran.drop(columns=['Profitability'])
Y = restoran[['Profitability']]

# Identifikasi kolom yang berisi data string
string_columns = X.select_dtypes(include=['object']).columns

# Lakukan Label Encoding untuk kolom string
label_encoders = {}
for col in string_columns:
    le = LabelEncoder()
    X[col] = le.fit_transform(X[col])
    label_encoders[col] = le

# Memisahkan data menjadi data latih dan data uji
X_train, X_test, y_train, y_test = train_test_split(X, Y, test_size=0.2, random_state=42)

# Menormalkan fitur
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

# Train the model on the training set
logreg = LogisticRegression()
logreg.fit(X_train_scaled, y_train)

# predict the response values for the observations in X
y_pred_logreg = logreg.predict(X_test_scaled)

# check how many predictions were generated
print(len(y_pred_logreg))

# Evaluasi model
print("Accuracy:", accuracy_score(y_test, y_pred_logreg))
print("Classification Report:\n", classification_report(y_test, y_pred_logreg))
print("Confusion Matrix:\n", confusion_matrix(y_test, y_pred_logreg))

# Evaluate the model
accuracy = accuracy_score(y_test, y_pred_logreg)
report = classification_report(y_test, y_pred_logreg)
conf_matrix = confusion_matrix(y_test, y_pred_logreg)

print(f'Logistic Regression Accuracy: {accuracy}')
print('Classification Report:')
print(report)
print('Confusion Matrix:')
print(conf_matrix)

from sklearn import metrics

from sklearn.neighbors import KNeighborsClassifier

knn = KNeighborsClassifier(n_neighbors=5)
knn.fit(X_train, y_train)
y_pred_knn = knn.predict(X_test)
print(metrics.accuracy_score(y_test, y_pred_knn))

# Evaluate the model
accuracy = accuracy_score(y_test, y_pred_knn)
report = classification_report(y_test, y_pred_knn)
conf_matrix = confusion_matrix(y_test, y_pred_knn)

print(f'KNN Accuracy: {accuracy}')
print('Classification Report:')
print(report)
print('Confusion Matrix:')
print(conf_matrix)

from sklearn.preprocessing import LabelEncoder
import numpy as np
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score

# Misalnya y_test dan y_pred_knn berisi data string
label_encoder = LabelEncoder()

# Encode target
y_test_encoded = label_encoder.fit_transform(y_test)
y_pred_knn_encoded = label_encoder.transform(y_pred_knn)

# Hitung metrik
mae = mean_absolute_error(y_test_encoded, y_pred_knn_encoded)
mse = mean_squared_error(y_test_encoded, y_pred_knn_encoded)
rmse = np.sqrt(mse)
r2 = r2_score(y_test_encoded, y_pred_knn_encoded)

print(f'Mean Absolute Error (MAE): {mae}')
print(f'Mean Squared Error (MSE): {mse}')
print(f'Root Mean Squared Error (RMSE): {rmse}')
print(f'R-squared (RÂ²): {r2}')

import numpy as np
import matplotlib.pyplot as plt
from sklearn.svm import SVC
from sklearn.metrics import classification_report, confusion_matrix
from sklearn import svm
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score

# Train the SVM model
svm_model = SVC(kernel='linear', probability=True)
svm_model.fit(X_train, y_train)

# Standardize the features
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

# Make predictions
y_pred_svm = svm_model.predict(X_test)

# Evaluate the model
svm_accuracy = accuracy_score(y_test, y_pred_svm)
conf_matrix = confusion_matrix(y_test, y_pred_svm)
class_report = classification_report(y_test, y_pred_svm)

print(f"SVM Accuracy: {svm_accuracy}")
print("Confusion Matrix:")
print(conf_matrix)
print("Classification Report:")
print(class_report)

import pandas as pd
import ast
from sklearn.preprocessing import OneHotEncoder, LabelEncoder, StandardScaler
from sklearn.model_selection import train_test_split, cross_val_score
from sklearn.ensemble import RandomForestClassifier
from sklearn.neighbors import KNeighborsClassifier
from sklearn.svm import SVC
from sklearn.metrics import classification_report, accuracy_score, confusion_matrix

# Load data
data = pd.read_csv('/content/restaurant_menu_optimization_data.csv')

# Preprocessing Ingredients: convert string representation of list to actual list
data['Ingredients'] = data['Ingredients'].apply(ast.literal_eval)

# One-Hot Encoding for MenuCategory
one_hot_encoder = OneHotEncoder()
menu_category_encoded = one_hot_encoder.fit_transform(data[['MenuCategory']]).toarray()

# Convert to DataFrame and add to original data
menu_category_df = pd.DataFrame(menu_category_encoded, columns=one_hot_encoder.get_feature_names_out(['MenuCategory']))
data_encoded = pd.concat([data, menu_category_df], axis=1)

# Label Encoding for Profitability
label_encoder = LabelEncoder()
data_encoded['Profitability'] = label_encoder.fit_transform(data_encoded['Profitability'])

# Standardize the Price column
scaler = StandardScaler()
data_encoded['Price'] = scaler.fit_transform(data_encoded[['Price']])

# Define the bins and labels for categorization
bins = [-float('inf'), -1, 0, 1]  # Adjust bins according to the actual price ranges
labels = ['Low', 'Medium', 'High']

# Categorize Price
data_encoded['PriceCategory'] = pd.cut(data_encoded['Price'], bins=len(labels), labels=labels)

# Drop original categorical columns that were encoded
data_encoded = data_encoded.drop(columns=['MenuCategory', 'MenuItem', 'Ingredients', 'RestaurantID'])

# Pisahkan fitur dan target
X = data_encoded.drop(columns=['Price', 'PriceCategory'])
y = data_encoded['PriceCategory']

# Pisahkan data menjadi data pelatihan dan data pengujian
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Inisialisasi model Random Forest
rf_classifier = RandomForestClassifier(random_state=42)
rf_classifier.fit(X_train, y_train)
rf_scores = cross_val_score(rf_classifier, X, y, cv=5, scoring='accuracy')
rf_accuracy = rf_scores.mean()
rf_std = rf_scores.std()
rf_y_pred = rf_classifier.predict(X_test)
rf_test_accuracy = accuracy_score(y_test, rf_y_pred)
rf_report = classification_report(y_test, rf_y_pred, output_dict=True)

# Inisialisasi model K-Nearest Neighbors (KNN)
knn_classifier = KNeighborsClassifier()
knn_classifier.fit(X_train, y_train)
knn_scores = cross_val_score(knn_classifier, X, y, cv=5, scoring='accuracy')
knn_accuracy = knn_scores.mean()
knn_std = knn_scores.std()
knn_y_pred = knn_classifier.predict(X_test)
knn_test_accuracy = accuracy_score(y_test, knn_y_pred)
knn_report = classification_report(y_test, knn_y_pred, output_dict=True)

# Inisialisasi model Support Vector Machine (SVM)
svm_classifier = SVC(kernel='linear', random_state=42)
svm_classifier.fit(X_train, y_train)
svm_scores = cross_val_score(svm_classifier, X, y, cv=5, scoring='accuracy')
svm_accuracy = svm_scores.mean()
svm_std = svm_scores.std()
svm_y_pred = svm_classifier.predict(X_test)
svm_test_accuracy = accuracy_score(y_test, svm_y_pred)
svm_report = classification_report(y_test, svm_y_pred, output_dict=True)

# Buat dictionary untuk menyimpan hasil evaluasi
results = {
    'Model': ['Random Forest', 'K-Nearest Neighbors', 'SVM'],
    'Cross-Validation Accuracy Mean': [rf_accuracy, knn_accuracy, svm_accuracy],
    'Cross-Validation Accuracy Std': [rf_std, knn_std, svm_std],
    'Test Accuracy': [rf_test_accuracy, knn_test_accuracy, svm_test_accuracy],
    'Precision (macro avg)': [rf_report['macro avg']['precision'], knn_report['macro avg']['precision'], svm_report['macro avg']['precision']],
    'Recall (macro avg)': [rf_report['macro avg']['recall'], knn_report['macro avg']['recall'], svm_report['macro avg']['recall']],
    'F1-score (macro avg)': [rf_report['macro avg']['f1-score'], knn_report['macro avg']['f1-score'], svm_report['macro avg']['f1-score']]
}

# Buat DataFrame dari dictionary
results_df = pd.DataFrame(results)

# Tampilkan hasil
print(results_df)

# Confusion Matrix untuk setiap model
print("Random Forest Confusion Matrix:\n", confusion_matrix(y_test, rf_y_pred))
print("K-Nearest Neighbors Confusion Matrix:\n", confusion_matrix(y_test, knn_y_pred))
print("SVM Confusion Matrix:\n", confusion_matrix(y_test, svm_y_pred))